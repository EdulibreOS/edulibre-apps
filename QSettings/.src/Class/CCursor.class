' Gambas class file

' Innova Project 
' Copyright (C) Herberth Guzm√°n
' herberthguzman@gmail.com
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Homepage: http://http://sourceforge.net/projects/innovadesktop
' This code belongs to Fabien Bodard and was adapted for Innova Project

Public Struct Header
  magic[4] As Byte
  header As Integer
  version As Integer
  ntoc As Integer
End Struct

Public Struct Toc
  type As Integer ' entry type
  subtype As Integer ' type - specific label - size For images
  position As Integer ' absolute byte position Of table In file
  
End Struct

Public Struct ChunkImage
  header As Integer ' bytes In chunk header(including type - specific fields)
  type As Integer ' must Match type In TOC For this chunk
  subtype As Integer ' must Match subtype In TOC For this chunk
  version As Integer ' version number For this chunk type
  width As Integer ' Must be less than Or equal To 0 x7fff
  height As Integer ' Must be less than Or equal To 0 x7fff
  xhot As Integer ' Must be less than Or equal To width
  yhot As Integer ' Must be less than Or equal To height
  delay As Integer ' Delay between animation frames In milliseconds
End Struct

''Store the images
Private $aImages As New Image[]

Property Read Count As Integer ''Return the images count

Public Sub _new(Path As String)
  
  Dim hHeader As Header
  Dim hFile As File
  Dim aToc As New Toc[]
  Dim hToc As Toc
  Dim i, j As Integer
  Dim aImage As New Integer[]
  Dim hChunkImage As ChunkImage
  Dim iPictureSize As Integer
  Dim hImage As Image
  
  hFile = Open Path For Read
  
  hHeader = Read #hFile As Header
  
  If hHeader.magic.ToString() <> "Xcur" Then Error.Raise("Invalid cursor file")
  
  For i = 1 To hHeader.ntoc
    hToc = Read #hFile As Toc
    If hToc.type = &Hfffd0002 Then 
      
      aToc.Add(hToc)
      
    Endif
  Next
  
  For Each hToc In aToc
    
    Seek #hFile, hToc.position
    hChunkImage = Read #hFile As ChunkImage
    iPicturesize = hChunkImage.width * hChunkImage.height
    
    For i = 0 To iPictureSize - 1
      
      j = Read #hFile As Integer
      aImage.Add(j)
    Next
    hImage = New Image(hChunkImage.width, hChunkImage.height, Color.Transparent, Image.Premultiplied)
    hImage.Pixels = aImage
    $aImages.Add(hImage)
    
    aImage.Clear
    
  Next
  
End

Private Function Count_Read() As Integer
  
  Return $aImages.Count
  
End

Public Function _get(Index As Integer) As Picture
  
  Return $aImages[Index].Picture
  
End
