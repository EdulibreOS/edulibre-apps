' Gambas module file

' Gambas class file

' Innova Project 
' Copyright (C) Herberth Guzm√°n
' herberthguzman@gmail.com
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Homepage: http://http://sourceforge.net/projects/innovadesktop

Public Settings_Core_Innova As New Settings(Desktop.ConfigDir &/ "Innova/Innova_Config.conf")
Private sResult_Icon As String
Private $hTimerChange As Timer
Public sDir As String
Public sPath_Wall_Rnd As String
Public sPath_Img_Rnd As String
Private iResult As Integer
Private sResult As String
Public sPicture As String
Private ImgButtonStyle As PushButton

Public Sub Refresh_Desktop()
  
  If $hTimerChange Then Return
  $hTimerChange = New Timer As "TimerChange"
  $hTimerChange.Delay = 500
  
End

Private Sub ReIniciar()
  
  Dim obj As Object
  
  For Each obj In Me.Controls
    If obj Is TextBox Then obj.Clear
    If obj Is ListBox Then obj.Delete
  Next
  
End

Public Sub TimerChange_Timer()
  
  If Not $hTimerChange Then Return
  $hTimerChange = Null
  
End

''update icons deskop

Public Sub Update_Desktop_IconAll()
  
  Refresh_Desktop
  '$hTimerChange.Start
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbIconAll.Value = True Then
    Settings_Core_Innova["Desktop/Show_Icon_All"] = 1
  Else
    Settings_Core_Innova["Desktop/Show_Icon_All"] = 0
  Endif
  Settings_Core_Innova.Save
  
End

Public Sub Update_Desktop_PC()
  
  Refresh_Desktop
  
  Settings_Core_Innova.Write(f_settings)
  $hTimerChange.Start
  If f_settings.swbPC.Value = True Then
    Settings_Core_Innova["Desktop/Show_Icon_PC"] = 1
  Else
    Settings_Core_Innova["Desktop/Show_Icon_PC"] = 0
  Endif
  Settings_Core_Innova.Save
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Desktop_Trash()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbTrash.Value = True Then
    Settings_Core_Innova["Desktop/Show_Icon_Trash"] = 1
  Else
    Settings_Core_Innova["Desktop/Show_Icon_Trash"] = 0
  Endif
  Settings_Core_Innova.Save
  
End

Public Sub Update_Desktop_Home()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbHome.Value = True Then
    Settings_Core_Innova["Desktop/Show_Icon_Home"] = 1
  Else
    Settings_Core_Innova["Desktop/Show_Icon_Home"] = 0
  Endif
  Settings_Core_Innova.Save
  
End

Public Sub Update_Desktop_Partitions()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbPartitions.Value = True Then
    Settings_Core_Innova["Desktop/Show_Icon_Partitions"] = 1
  Else
    Settings_Core_Innova["Desktop/Show_Icon_Partitions"] = 0
  Endif
  Settings_Core_Innova.Save
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Desktop_Network()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbNetwork.Value = True Then
    Settings_Core_Innova["Desktop/Show_Icon_Network"] = 1
  Else
    Settings_Core_Innova["Desktop/Show_Icon_Network"] = 0
  Endif
  Settings_Core_Innova.Save
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Color_Solid()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbColorS.Value = True Then
    Settings_Core_Innova["Desktop/Show_Wallpaper_Color"] = 1
    Settings_Core_Innova["Desktop/Dir_Wallpaper_Desktop_Random"] = ""
    Settings_Core_Innova["Desktop/Image_Wallpaper_Desktop_Random"] = ""
    Settings_Core_Innova["Desktop/Time_Random"] = ""
    Settings_Core_Innova["Desktop/Wallpaper_Desktop_Random"] = ""
    f_settings.swbRndWall.Value = False 
    
    f_settings.pnlWall.Enabled = False
    f_settings.pnlRandom.Enabled = False
    f_settings.cobWallpaper.Enabled = True
    f_settings.txlColor.Enabled = True
    f_settings.txlColor.Background = f_settings.cobWallpaper.Color
    
  Else
    Settings_Core_Innova["Desktop/Show_Wallpaper_Color"] = 0
    f_settings.pnlWall.Enabled = True
    f_settings.pnlRandom.Enabled = True
    f_settings.cobWallpaper.Enabled = False
    f_settings.txlColor.Enabled = False
    
  Endif
  Settings_Core_Innova.Save
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Color_Solid_Wallpaper()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Desktop/Wallpaper_Color"] = f_settings.cobWallpaper.Color
  Settings_Core_Innova.Save
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

''show icons deskop

Public Sub Show_Desktop_PC()
  
  Try iResult = Settings_Core_Innova["Desktop/Show_Icon_All", f_settings]
  
  If iResult = 1 Then
    f_settings.swbIconAll.Value = True 
  Endif
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Desktop_IconAll()
  
  Try iResult = Settings_Core_Innova["Desktop/Show_Icon_PC", f_settings]
  
  If iResult = 1 Then
    f_settings.swbPC.Value = True 
  Endif
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Desktop_Trash()
  
  Try iResult = Settings_Core_Innova["Desktop/Show_Icon_Trash", f_settings]
  
  If iResult = 1 Then
    f_settings.swbTrash.Value = True 
  Endif
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Desktop_Home()
  
  Try iResult = Settings_Core_Innova["Desktop/Show_Icon_Home", f_settings]
  
  If iResult = 1 Then
    f_settings.swbHome.Value = True 
  Endif
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Desktop_Partitions()
  
  Try iResult = Settings_Core_Innova["Desktop/Show_Icon_Partitions", f_settings]
  
  If iResult = 1 Then
    f_settings.swbPartitions.Value = True 
  Endif
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Desktop_Network()
  
  Try iResult = Settings_Core_Innova["Desktop/Show_Icon_Network", f_settings]
  
  If iResult = 1 Then
    f_settings.swbNetwork.Value = True 
  Endif
  'Catch
  ' Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Color_Solid()
  
  Try sResult_Icon = Settings_Core_Innova["Desktop/Show_Wallpaper_Color", f_settings]
  
  If sResult_Icon = 1 Then
    f_settings.swbColorS.Value = True 
    f_settings.pnlWall.Enabled = False
  Endif
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Change_Wallpaper_Conf_Wallpaper()
  
  Settings_Core_Innova.Write(f_conf_wallpaper)
  Settings_Core_Innova["Desktop/Wallpaper_Desktop"] = f_conf_wallpaper.txtselectfondo.Text
  Settings_Core_Innova.Save
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Desktop_Color_Solid()
  
  Dim sResult As String
  
  sResult_Icon = Settings_Core_Innova["Desktop/Wallpaper_Color"]
  sResult = Settings_Core_Innova["Desktop/Show_Wallpaper_Color"]
  
  If sResult = 1 Then
    f_settings.txlColor.Text = sResult_Icon
    f_settings.txlColor.Background = sResult_Icon 
    f_settings.cobWallpaper.Color = (sResult_Icon)
    f_settings.txlColor.Enabled = True
    f_settings.pnlWall.Enabled = False
  Else
    f_settings.txlColor.Text = sResult_Icon 
    f_settings.txlColor.Background = 0 
    f_settings.cobWallpaper.Color = (sResult_Icon)
    f_settings.txlColor.Enabled = False
    f_settings.btoSelWall.Enabled = True
  Endif
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Change_Wallpaper_Settings()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.btoSelWall.Text = Null Then
    Settings_Core_Innova["Desktop/Wallpaper_Desktop"] = ""
  Else
    Settings_Core_Innova["Desktop/Wallpaper_Desktop"] = f_settings.btoSelWall.Text
  Endif
  Settings_Core_Innova.Save
  f_settings.tbtWallOk.Enabled = True
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Rand_Wallpaper()
  
  Dim iResult_Rnd_True As Integer
  Dim sResult_Dir_Rnd_Wall As String 
  Dim sResult_Name_Rnd_Wall As String 
  
  Try iResult_Rnd_True = Settings_Core_Innova["Desktop/Wallpaper_Desktop_Random"]
  sResult_Dir_Rnd_Wall = Settings_Core_Innova["Desktop/Dir_Wallpaper_Desktop_Random"]
  sResult_Name_Rnd_Wall = Settings_Core_Innova["Desktop/Image_Wallpaper_Desktop_Random"]
  
  If iResult_Rnd_True = 1 Then
    f_settings.swbRndWall.Value = True 
    f_settings.tbtSelDir.Enabled = True
    f_settings.sirTime.Enabled = True
    f_settings.btoSelWall.Enabled = False
    f_settings.tbtWallGal.Enabled = False
    f_settings.pnlWall.Enabled = False
    f_settings.tbtSelDir.text = sResult_Dir_Rnd_Wall
    Randomize_Wallpaper
    f_settings.lblSpathWallRnd.Text = sPath_Img_Rnd 
    
  Else
    
    f_settings.swbRndWall.Value = False 
    f_settings.tbtSelDir.Enabled = False
    f_settings.sirTime.Enabled = False
    f_settings.tbtSelDir.Clear
    f_settings.tbtWallGal.Enabled = True
    f_settings.lblSpathWallRnd.Text = Null
    f_settings.btoSelWall.Enabled = True
    f_settings.pnlWall.Enabled = True
    
    Settings_Core_Innova.Write(f_settings)
    Settings_Core_Innova["Desktop/Dir_Wallpaper_Desktop_Random"] = ""
    Settings_Core_Innova["Desktop/Image_Wallpaper_Desktop_Random"] = ""
    Settings_Core_Innova["Desktop/Time_Random"] = Null
    Settings_Core_Innova.Save
    
  Endif
  
  'Catch
  ' Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Randomize_Wallpaper()
  
  Dim $Files As String[]
  Dim i As Integer
  
  Dim sResult_Dir_Rnd_Wall As String 
  Dim sResult_Rnd_True As String 
  
  Try sResult_Dir_Rnd_Wall = Settings_Core_Innova["Desktop/Dir_Wallpaper_Desktop_Random", f_settings]
  sResult_Rnd_True = Settings_Core_Innova["Desktop/Wallpaper_Desktop_Random", f_settings]
  
  sDir = sResult_Dir_Rnd_Wall
  $Files = Dir(sDir, "*.bmp")
  $Files.Insert(Dir(sDir, "*.jpg"))
  $Files.Insert(Dir(sDir, "*.jpeg"))
  $Files.Insert(Dir(sDir, "*.png"))
  
  i = Int(Rnd(0, $Files.Max))
  
  If sResult_Rnd_True = 1 Then 
    Settings_Core_Innova.Write(f_settings)
    Settings_Core_Innova["Desktop/Image_Wallpaper_Desktop_Random"] = $Files[i] 
    Settings_Core_Innova.Save
  Else
    Settings_Core_Innova.Write(f_settings)
    Settings_Core_Innova["Desktop/Image_Wallpaper_Desktop_Random"] = ""
    Settings_Core_Innova.Save
  Endif
  
  f_settings.imgPreview.Picture = Picture[sdir &/ $Files[i]]
  
  sPath_Img_Rnd = sdir &/ $Files[i]
  f_settings.lblSpathWallRnd.Text = sPath_Img_Rnd
Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Change_Wallpaper_Random_Dir()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Desktop/Dir_Wallpaper_Desktop_Random"] = f_settings.tbtSelDir.Text
  Settings_Core_Innova.Save
  
  'Catch
  ' Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Active_Time_Wallpaper_Rnd_Eliminar()
  
  Dim sActive_Time_Rnd As String 
  Dim sTime As Integer
  
  Try sActive_Time_Rnd = Settings_Core_Innova["Desktop/Time_Random"]
  Try sTime = Val(sActive_Time_Rnd) 
  
End

Public Sub Show_Time_Wallpaper_Rnd()
  
  Dim sResult_Desk_Time_Rnd As Integer 
  Dim sTime As Integer
  
  Try sResult_Desk_Time_Rnd = Settings_Core_Innova["Desktop/Time_Random"]
  
  sTime = (sResult_Desk_Time_Rnd) / 3600000
  f_settings.sirTime.Value = (sTime)
  
End

Public Sub Change_Time_Wallpaper_Rnd()
  
  Dim sTime As Integer
  Dim sResult_Rnd_True As String 
  
  Try sResult_Rnd_True = Settings_Core_Innova["Desktop/Wallpaper_Desktop_Random"]
  sTime = f_settings.sirTime.Value * 3600000
  
  If sResult_Rnd_True = 1 Then 
    Settings_Core_Innova.Write(f_settings)
    Settings_Core_Innova["Desktop/Time_Random"] = sTime
    Settings_Core_Innova.Save
  Else
    Settings_Core_Innova.Write(f_settings)
    Settings_Core_Innova["Desktop/Time_Random"] = ""
    Settings_Core_Innova.Save
  Endif
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Change_Random_Wallpaper()
  
  Settings_Core_Innova.Write(f_settings)
  
  If f_settings.swbRndWall.Value = True Then
    Settings_Core_Innova["Desktop/Wallpaper_Desktop_Random"] = 1
  Else
    Settings_Core_Innova["Desktop/Wallpaper_Desktop_Random"] = 0 
  Endif  
  Settings_Core_Innova.Save
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Preview_Wallpaper()
  
  Dim sResult_Desktop As String 
  Dim sResult_Desktop_Rand As String 
  Dim sResult_Dir_Wallpaper_Desktop_Random As String
  Dim iResult_Rnd_True As Integer
  
  Try sResult_Desktop = Settings_Core_Innova["Desktop/Wallpaper_Desktop"]
  Try sResult_Desktop_Rand = Settings_Core_Innova["Desktop/Image_Wallpaper_Desktop_Random"]
  Try sResult_Dir_Wallpaper_Desktop_Random = Settings_Core_Innova["Desktop/Dir_Wallpaper_Desktop_Random"]
  
  Try iResult_Rnd_True = Settings_Core_Innova["Desktop/Wallpaper_Desktop_Random"]
  
  If (iResult_Rnd_True = 1) Then
    f_settings.imgPreview.Picture = Picture[sResult_Dir_Wallpaper_Desktop_Random &/ sResult_Desktop_Rand]
  Else
    Settings_Core_Innova.Write(f_settings)
    Settings_Core_Innova["Desktop/Dir_Wallpaper_Desktop_Random"] = ""
    Settings_Core_Innova["Desktop/Image_Wallpaper_Desktop_Random"] = ""
    Settings_Core_Innova["Desktop/Time_Random"] = ""
    Settings_Core_Innova["Desktop/Wallpaper_Desktop_Random"] = ""
    Settings_Core_Innova.Save
  Endif
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Preview_Wallpaper_RND()
  
  Dim sResult_Desktop As String 
  Dim sResult_Desktop_Rand As String 
  Dim sResult_Dir_Wallpaper_Desktop_Random As String
  Dim iResult_Rnd_True As Integer
  
  Try sResult_Desktop = Settings_Core_Innova["Desktop/Wallpaper_Desktop"]
  Try sResult_Desktop_Rand = Settings_Core_Innova["Desktop/Image_Wallpaper_Desktop_Random"]
  Try sResult_Dir_Wallpaper_Desktop_Random = Settings_Core_Innova["Desktop/Dir_Wallpaper_Desktop_Random"]
  Try iResult = Settings_Core_Innova["Desktop/Wallpaper_Desktop_Random"]
  
  If (iResult = 1) Then
    f_settings.imgPreview.Picture = Picture[sResult_Dir_Wallpaper_Desktop_Random &/ sResult_Desktop_Rand]
    
  Endif
  
End

Public Sub Update_IconSize_Desktop()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Desktop/Icon_Size_Desktop"] = f_settings.cmbsize.Text
  Settings_Core_Innova.Save
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_IconSize_Desktop()
  
  Try iResult = Settings_Core_Innova["Desktop/Icon_Size_Desktop"]
  
  If IsNull(iResult) Then 
    f_settings.cmbsize.Text = M_Var_Global.IconSize_Desktop 
  Else
    f_settings.cmbsize.Text = iResult  
  Endif
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_IconLine_Desktop()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Desktop/IconLine_Desktop"] = f_settings.sirIconLine.Value
  Settings_Core_Innova.Save
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_IconLine_Desktop()
  
  Try iResult = Settings_Core_Innova["Desktop/IconLine_Desktop"]
  
  If IsNull(iResult) Then 
    f_settings.sirIconLine.Value = M_Var_Global.IconSize_Desktop 
  Else
    f_settings.sirIconLine.Value = iResult  
  Endif
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_sFont_Desktop()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Desktop/Font"] = f_settings.FontBoxDesktop.Value
  Settings_Core_Innova.Save
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_sFont_Desktop()
  
  Try sResult = Settings_Core_Innova["Desktop/Font"]
  Try f_settings.FontBoxDesktop.Value = sResult
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Color_Font_Desktop()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Desktop/Color_Font_Desktop"] = f_settings.cobColorFont.Value
  Settings_Core_Innova.Save
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Color_Font_Desktop()
  
  Try iResult = Settings_Core_Innova["Desktop/Color_Font_Desktop"]
  
  If Not IsNull(iResult) Then 
    f_settings.cobColorFont.Value = iResult  
  Endif
  
End

''INNOVA
Public Sub Update_Transparent_Innova()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbTrans.Value = True Then
    Settings_Core_Innova["Innova/Transparent"] = 1
  Else
    Settings_Core_Innova["Innova/Transparent"] = 0
  Endif 
  Settings_Core_Innova.Save
  
  'Catch
  ' Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Transparent_Innova()
  
  Try iResult = Settings_Core_Innova["Innova/Transparent"]
  
  If Not IsNull(iResult) Then 
    f_settings.swbTrans.Value = iResult  
  Endif
  
End

Public Sub Show_Audio_Start_Innova()
  
  Dim sResult As String 
  
  Try sResult = Settings_Core_Innova["Innova/Sound_Start"]
  f_settings.btoSound.Text = sResult
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Audio_Start_Innova()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Innova/Sound_Start"] = f_settings.btoSound.Text 
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Icon_Start_Launcher()
  
  Try sResult = Settings_Core_Innova["Panel/Icon_Start"]
  Try f_settings.tbtLogoStart.Picture = Picture[sResult].Image.Stretch(32, 32).Picture
  
  If IsNull(sResult) Then
    f_settings.chkIconAppDef.Value = True 
  Else
    f_settings.chkIconAppDef.Value = False
  Endif
  
End

Public Sub Update_Icon_Start_Launcher()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Panel/Icon_Start"] = sPicture
  Settings_Core_Innova.Save
  
End

Public Sub Show_No_Desktop()
  
  Dim iDesktop As Integer
  
  iDesktop = Desktop.Count
  
  Try iResult = Settings_Core_Innova["Innova/No_Desktop"]
  
  If IsNull(iResult) Then
    f_settings.sirDeskNo.Value = iDesktop
  Else
    f_settings.sirDeskNo.Value = iResult
  Endif
  
End

Public Sub Update_No_Desktop()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Innova/No_Desktop"] = f_settings.sirDeskNo.Value
  Settings_Core_Innova.Save
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_IconSize_Innova()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Innova/Icon_Size"] = f_settings.cmbSizeDesktop.Text
  Settings_Core_Innova.Save
  
End

Public Sub Show_IconSize_Innova()
  
  Try iResult = Settings_Core_Innova["Innova/Icon_Size"]
  
  If IsNull(iResult) Then 
    f_settings.cmbSizeDesktop.Text = M_Var_Global.IconSize_Innova
  Else
    f_settings.cmbSizeDesktop.Text = iResult  
  Endif
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Organize_Desktop()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Desktop/Organize"] = f_settings.cmbOrganize.Text
  Settings_Core_Innova.Save
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]" 
  
End

Public Sub Show_Organize_Desktop()
  
  Try sResult = Settings_Core_Innova["Desktop/Organize"]
  
  If IsNull(sResult) Then 
    f_settings.cmbOrganize.Text = M_Var_Global.sOrganize '"Rows"
  Else
    f_settings.cmbOrganize.Text = sResult  
  Endif
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Order_Desktop()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Desktop/Order"] = f_settings.cmbOrder.Text
  Settings_Core_Innova.Save
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Order_Desktop()
  
  Try sResult = Settings_Core_Innova["Desktop/Order"]
  
  If IsNull(sResult) Then 
    f_settings.cmbOrder.Text = "Name"
  Else
    f_settings.cmbOrder.Text = sResult  
  Endif
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Order_Ascending_Desktop()
  
  Try iResult = Settings_Core_Innova["Desktop/Order_Ascending"]
  
  If (iResult = 1) Then
    f_settings.chkIconAsc.Value = True 
  Else
    f_settings.chkIconAsc.Value = False
  Endif
  
End

Public Sub Update_Order_Ascending_Desktop()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.chkIconAsc.Value = True Then
    Settings_Core_Innova["Desktop/Order_Ascending"] = 1
  Else
    Settings_Core_Innova["Desktop/Order_Ascending"] = 0
  Endif 
  Settings_Core_Innova.Save
  
End

Public Sub Show_Help_Popup_Desktop()
  
  Try iResult = Settings_Core_Innova["Desktop/Help_Popup"]
  
  If (iResult = 1) Then
    f_settings.chkIconPopup.Value = True 
  Else
    f_settings.chkIconPopup.Value = False
  Endif
  
End

Public Sub Update_Help_Popup_Desktop()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.chkIconPopup.Value = True Then
    Settings_Core_Innova["Desktop/Help_Popup"] = 1
  Else
    Settings_Core_Innova["Desktop/Help_Popup"] = 0
  Endif 
  Settings_Core_Innova.Save
  
End

''LANGUAJE
Public Sub LIST_LANG_EN()
  
  With f_settings.lblangselcountry
    .Add("en_AG", "en_AG.UTF-8")
    .Add("en_AU", "en_AU.UTF-8")
    .Add("en_BW", "en_BW.UTF-8")
    .Add("en_CA", "en_CA.UTF-8")
    .Add("en_DK", "en_DK.UTF-8")
    .Add("en_GB", "en_GB.UTF-8")
    .Add("en_HK", "en_HK.UTF-8")
    .Add("en_IE", "en_IE.UTF-8")
    .Add("en_IN", "en_IN.UTF-8")
    .Add("en_NG", "en_NG.UTF-8")
    .Add("en_NZ", "en_NZ.UTF-8")
    .Add("en_PH", "en_PH.UTF-8")
    .Add("en_SG", "en_SG.UTF-8")
    .Add("en_US", "en_US.UTF-8")
    .Add("en_ZA", "en_ZA.UTF-8")
    .Add("en_ZM", "en_ZM.UTF-8")
    .Add("en_ZW", "en_ZW.UTF-8")
    
  End With
Catch
  
End

Public Sub LIST_LANG_ES()
  
  With f_settings.lblangselcountry
    .Add("en_AG", "es_AR.UTF-8")
    .Add("es_BO", "es_BO.UTF-8")
    .Add("es_CL", "es_CL.UTF-8")
    .Add("es_CO", "es_CO.UTF-8")
    .Add("es_CR", "es_CR.UTF-8")
    .Add("es_CU", "es_CU.UTF-8")
    .Add("es_DO", "es_DO.UTF-8")
    .Add("es_EC", "es_EC.UTF-8")
    .Add("es_ES", "es_ES.UTF-8")
    .Add("es_GT", "es_GT.UTF-8")
    .Add("es_HN", "es_HN.UTF-8")
    .Add("es_MX", "es_MX.UTF-8")
    .Add("es_NI", "es_NI.UTF-8")
    .Add("es_PA", "es_PA.UTF-8")
    .Add("es_PE", "es_PE.UTF-8")
    .Add("es_PR", "es_PR.UTF-8")
    .Add("es_PY", "es_PY.UTF-8")
    .Add("es_SV", "es_SV.UTF-8")
    .Add("es_US", "es_US.UTF-8")
    .Add("es_UY", "es_UY.UTF-8")
    .Add("es_VE", "es_VE.UTF-8")
  End With
  
End

Public Sub LIST_LANG_FR()
  
  With f_settings.lblangselcountry
    .Add("fr_BE", "fr_BE.UTF-8")
    .Add("fr_CA", "fr_CA.UTF-8")
    .Add("fr_CH", "fr_CH.UTF-8")
    .Add("fr_LU", "fr_LU.UTF-8")
    .Add("fr_FR", "fr_FR.UTF-8")    
  End With
  
End

Public Sub LIST_LANG_CHOICES()
  
  With f_settings.lblangsel
    .Add("es_ES", "Spanish (Espa√±ol)")
    .Add("en_US", "English (Ingles)")
    .Add("fr_FR", "Fran√ßais (Frances)")
  End With
Catch
  
End

Public Sub Udpate_Lang_All_System()
  
  Dim hFile As File
  Dim file_conf As String
  Dim file_conf_tmp As String
  Dim dat_string As String
  Dim info_locale As String
  Dim lang As String
  Dim copy_locale As String
  
  sResult = f_settings.lblangselcountry.Current.text
  
  info_locale = sResult
  lang = ((Left(info_locale, 2)))
  
  file_conf = ("/etc/default/locale")
  file_conf_tmp = ("/tmp/locale")
  
  If Not Exist(file_conf) Then
    dat_string = "LANG=" "'" & info_locale & "'\n"
      "LANGUAGE=" "'" & ((Left(info_locale, 5))) & ":" & lang & "'\n"
      "LC_ALL=" "'" & info_locale & "'\n"
    File.Save(file_conf_tmp, dat_string)
    copy_locale = "gksu -l cp " & file_conf_tmp & " " & file_conf
    Shell copy_locale Wait
  Else
    hFile = Open file_conf For Input
    dat_string = "LANG=" "'" & info_locale & "'\n"
      "LANGUAGE=" "'" & ((Left(info_locale, 5))) & ":" & lang & "'\n"
      "LC_ALL=" "'" & info_locale & "'\n"
    hFile.Save(file_conf_tmp, dat_string)
    copy_locale = "gksu -l cp " & file_conf_tmp & " " & file_conf
    Shell copy_locale Wait
    
  Endif
  
  Close hFile
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_sLangeSys()
  
  f_settings.lbllang.Text = System.Language
  
End

Public Sub Update_Style_Launcher()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.optMini.Value = True Then
    Settings_Core_Innova["Launcher/Style_Launcher"] = "Mini" 
  Endif
  
  If f_settings.optTablet.Value = True Then
    Settings_Core_Innova["Launcher/Style_Launcher"] = "Tablet" 
  Endif 
  
  If f_settings.optCNB.Value = True Then
    Settings_Core_Innova["Launcher/Style_Launcher"] = "CNB" 
  Endif 
  Settings_Core_Innova.Save
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

''LAUNCHER
Public Sub Show_Style_Launcher()
  
  Try sResult = Settings_Core_Innova["Launcher/Style_Launcher"]
  
  If sResult = "Mini" Then
    f_settings.optMini.Value = True
  Else
    f_settings.optMini.Value = False
  Endif
  
  If sResult = "Tablet" Then
    f_settings.optTablet.Value = True
  Else
    f_settings.optTablet.Value = False
  Endif
  
  If sResult = "CNB" Then
    f_settings.optCNB.Value = True
  Else
    f_settings.optCNB.Value = False
  Endif
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_IconSize_Launcher()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Launcher/Icon_Size"] = f_settings.cmbSizeLauncher.Text
  Settings_Core_Innova.Save
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_IconSize_Launcher()
  
  Try iResult = Settings_Core_Innova["Launcher/Icon_Size"]
  
  If IsNull(iResult) Then 
    f_settings.cmbSizeLauncher.Text = M_Var_Global.IconSize_Launcher
  Else
    f_settings.cmbSizeLauncher.Text = iResult  
  Endif
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Cat_Hide_Launcher()
  
  Try iResult = Settings_Core_Innova["Launcher/Show_Cat"]
  If iResult = 1 Then
    f_settings.swbCatHide.Value = True 
  Else
    f_settings.swbCatHide.Value = False
  Endif
  
End

Public Sub Update_Cat_Hide_Launcher()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbCatHide.Value = True Then
    Settings_Core_Innova["Launcher/Show_Cat"] = 1
  Else
    Settings_Core_Innova["Launcher/Show_Cat"] = 0
  Endif 
  Settings_Core_Innova.Save
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"

End

Public Sub Show_Text_Launcher()
  
  Try iResult = Settings_Core_Innova["Launcher/Show_Text"]
  If iResult = 1 Then
    f_settings.swbShowText.Value = True 
  Else
    f_settings.swbShowText.Value = False
  Endif
  
End

Public Sub Update_Text_Launcher()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbShowText.Value = True Then
    Settings_Core_Innova["Launcher/Show_Text"] = 1
  Else
    Settings_Core_Innova["Launcher/Show_Text"] = 0
  Endif 
  Settings_Core_Innova.Save
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"

End

Public Sub Show_Cat_Mouse_Move_Launcher()
  
  Try sResult = Settings_Core_Innova["Launcher/Cat_MouseMove"]
  If sResult = 1 Then
    f_settings.swbCatMouseMove.Value = True 
  Else
    f_settings.swbCatMouseMove.Value = False
  Endif
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"

End

Public Sub Update_Cat_Mouse_Move_Launcher()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbCatMouseMove.Value = True Then
    Settings_Core_Innova["Launcher/Cat_MouseMove"] = 1
  Else
    Settings_Core_Innova["Launcher/Cat_MouseMove"] = 0
  Endif 
  Settings_Core_Innova.Save
  
End

Public Sub Show_Opacity_Launcher()
  
  Try iResult = Settings_Core_Innova["Launcher/Opacity"]
  
  If IsNull(iResult) Then 
    f_settings.sldOpacity.Value = M_Var_Global.iOpacity_Launcher
  Else
    f_settings.sldOpacity.Value = iResult
  Endif
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Opacity_Launcher()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Launcher/Opacity"] = f_settings.sldOpacity.Value
  Settings_Core_Innova.Save
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"

End

Public Sub Update_Transparent_Launcher()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbLauncherTrans.Value = True Then
    Settings_Core_Innova["Launcher/Transparent"] = 1
  Else
    Settings_Core_Innova["Launcher/Transparent"] = 0
  Endif 
  Settings_Core_Innova.Save
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"

End

Public Sub Show_Transparent_Launcher()
  
  Try sResult = Settings_Core_Innova["Launcher/Transparent"]
  If sResult = 1 Then
    f_settings.swbLauncherTrans.Value = True 
  Else
    f_settings.swbLauncherTrans.Value = False
  Endif
  
End

Public Sub Change_Background_Launcher()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.btoLauncherBack.Text = Null Then
    Settings_Core_Innova["Launcher/Background"] = ""
  Else
    Settings_Core_Innova["Launcher/Background"] = f_settings.btoLauncherBack.Text
  Endif
  Settings_Core_Innova.Save
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Preview_Background_Launcher()
  
  Try sResult = Settings_Core_Innova["Launcher/Background"]
  
  If Not IsNull(sResult) Then 
    f_settings.btoLauncherBack.Text = sResult
    f_settings.imgPreviewLaunch.Picture = Picture[sResult]
    
  Endif
  
End

''PANEL
Public Sub Update_Size_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Panel/Size"] = f_settings.sirSizePanel.Value
  Settings_Core_Innova.Save
  
End

Public Sub Show_Size_Panel()
  
  Try iResult = Settings_Core_Innova["Panel/Size"]
  
  If IsNull(iResult) Then 
    f_settings.sirSizePanel.Value = M_Var_Global.iSize_Panel
  Else
    f_settings.sirSizePanel.Value = iResult
  Endif
  
End

Public Sub Update_Icon_Size_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Panel/Icon_Size"] = f_settings.cmbSizePanel.Text
  Settings_Core_Innova.Save
  
End

Public Sub Show_Icon_Size_Panel()
  
  Try iResult = Settings_Core_Innova["Panel/Icon_Size"]
  
  If IsNull(iResult) Then 
    f_settings.cmbSizePanel.Text = M_Var_Global.IconSize_Panel
  Else
    f_settings.cmbSizePanel.Text = iResult
  Endif
  
End

Public Sub Update_Large_Size_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Panel/Large_Size"] = f_settings.sirSizeLarge.Value
  Settings_Core_Innova.Save
  
End

Public Sub Show_Large_Size_Panel()
  
  Try iResult = Settings_Core_Innova["Panel/Large_Size"]
  
  If IsNull(iResult) Then 
    f_settings.sirSizeLarge.Value = M_Var_Global.iSize_Large_Panel
  Else
    f_settings.sirSizeLarge.Value = iResult
  Endif
  
End

Public Sub Update_Position_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  '' INFERIOR
  If f_settings.optPosBot.Value = True Then
    Settings_Core_Innova["Panel/Position"] = "Bottom" 
  Endif
  ''SUPERIOR
  If f_settings.optPosTop.Value = True Then
    Settings_Core_Innova["Panel/Position"] = "Top" 
  Endif
  
  Settings_Core_Innova.Save
  
End

Public Sub Show_Position_Panel()
  
  Try sResult = Settings_Core_Innova["Panel/Position"]
  
  If IsNull(sResult) Then 
    sResult = M_Var_Global.sPosition_Panel
  Endif
  ''INFERIOR
  If sResult = "Bottom" Then
    f_settings.optPosBot.Value = True
  Else
    f_settings.optPosBot.Value = False
  Endif
  ''SUPERIOR
  If sResult = "Top" Then
    f_settings.optPosTop.Value = True
  Else
    f_settings.optPosTop.Value = False
  Endif
  
End

Public Sub Show_OnlyIcon_Taskbar_Panel()
  
  Try iResult = Settings_Core_Innova["Panel/OnlyIcon_Taskbar"]
  If iResult = 1 Then
    f_settings.swbShowIcon.Value = True 
  Else
    f_settings.swbShowIcon.Value = False
  Endif
  
End

Public Sub Update_OnlyIcon_Taskbar_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbShowIcon.Value = True Then
    Settings_Core_Innova["Panel/OnlyIcon_Taskbar"] = 1
  Else
    Settings_Core_Innova["Panel/OnlyIcon_Taskbar"] = 0
  Endif 
  Settings_Core_Innova.Save
  
End

Public Sub Show_Transparent_Panel()
  
  Try iResult = Settings_Core_Innova["Panel/Transparent"]
  If iResult = 1 Then
    f_settings.swbPanelTrans.Value = True 
  Else
    f_settings.swbPanelTrans.Value = False
  Endif
  
End

Public Sub Update_Transparent_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbPanelTrans.Value = True Then
    Settings_Core_Innova["Panel/Transparent"] = 1
  Else
    Settings_Core_Innova["Panel/Transparent"] = 0
  Endif 
  Settings_Core_Innova.Save
  
End

Public Sub Show_Dock_Panel()
  
  Try iResult = Settings_Core_Innova["Panel/Dock"]
  If iResult = 1 Then
    f_settings.swbPanelDock.Value = True 
  Else
    f_settings.swbPanelDock.Value = False
  Endif
  
End

Public Sub Update_Dock_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbPanelDock.Value = True Then
    Settings_Core_Innova["Panel/Dock"] = 1
  Else
    Settings_Core_Innova["Panel/Dock"] = 0
  Endif 
  Settings_Core_Innova.Save
  
End

Public Sub Show_AutoHide_Panel()
  
  Try iResult = Settings_Core_Innova["Panel/Auto_Hide"]
  If iResult = 1 Then
    f_settings.swbAutohiding.Value = True 
  Else
    f_settings.swbAutohiding.Value = False
  Endif
  
End

Public Sub Update_AutoHide_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbAutohiding.Value = True Then
    Settings_Core_Innova["Panel/Auto_Hide"] = 1
  Else
    Settings_Core_Innova["Panel/Auto_Hide"] = 0
  Endif 
  Settings_Core_Innova.Save
  
End

Public Sub Show_PopupHelp_Panel()
  
  Try iResult = Settings_Core_Innova["Panel/Popup_Help"]
  If iResult = 1 Then
    f_settings.swbShowPopupHelp.Value = True 
  Else
    f_settings.swbShowPopupHelp.Value = False
  Endif
  
End

Public Sub Update_PopupHelp_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbShowPopupHelp.Value = True Then
    Settings_Core_Innova["Panel/Popup_Help"] = 1
  Else
    Settings_Core_Innova["Panel/Popup_Help"] = 0
  Endif 
  Settings_Core_Innova.Save
  
End

Public Sub Show_Opacity_Panel()
  
  Try iResult = Settings_Core_Innova["Panel/Opacity"]
  
  If IsNull(iResult) Then 
    f_settings.sldOpacityPanel.Value = M_Var_Global.iOpacity_Panel
  Else
    f_settings.sldOpacityPanel.Value = iResult
  Endif
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Opacity_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Panel/Opacity"] = f_settings.sldOpacityPanel.Value
  Settings_Core_Innova.Save
  
End

Public Sub Show_Img_Panel()
  
  Try sResult = Settings_Core_Innova["Panel/Background_Image"]
  
  If Not IsNull(sResult) Then
    '  f_settings.chkBackground.Value = False 
    'Else
    f_settings.chkImgPanel.Value = True 
    f_settings.imgPreviewPanel.Picture = Picture[sResult]
    f_settings.BtnBoxImagePanel.Text = sResult
  Endif
  
End

Public Sub Update_Img_Panel()
  
  Try sResult = Settings_Core_Innova["Panel/Background_Color"]
  
  Settings_Core_Innova.Write(f_settings)
  
  If f_settings.BtnBoxImagePanel.Text = Null Then
    Settings_Core_Innova["Panel/Background_Image"] = ""
  Else
    Settings_Core_Innova["Panel/Background_Image"] = f_settings.BtnBoxImagePanel.Text
  Endif
  Settings_Core_Innova.Save
  
End

Public Sub Show_Color_Panel()
  
  Try sResult = Settings_Core_Innova["Panel/Background_Color"]
  
  If Not IsNull(sResult) Then
    
    f_settings.chkBackground.Value = True 
    f_settings.imgPreviewPanel.Background = sResult
    f_settings.cobBackground.Color = (sResult)
    
  Endif
  
End

Public Sub Update_Color_Panel()
  
  Try sResult = Settings_Core_Innova["Panel/Background_Image"]
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Panel/Background_Image"] = ""
  
  If (f_settings.cobBackground.Value = False) Or (f_settings.chkBackground.Value = False) Then
    Settings_Core_Innova["Panel/Background_Color"] = ""
  Else
    Settings_Core_Innova["Panel/Background_Color"] = f_settings.cobBackground.Color
    
  Endif
  
  Settings_Core_Innova.Save
  
End

Public Sub Show_Font_Color_Panel()
  
  Try sResult = Settings_Core_Innova["Panel/Font_Color"]
  
  If IsNull(sResult) Then
    f_settings.chkFontColor.Value = False 
  Else
    f_settings.chkFontColor.Value = True 
    f_settings.cobForecolor.Color = (sResult)
  Endif
Catch
  
End

Public Sub Update_Font_Color_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  
  If (f_settings.chkFontColor.Value = False) Then
    Settings_Core_Innova["Panel/Font_Color"] = ""
  Else
    Settings_Core_Innova["Panel/Font_Color"] = f_settings.cobForecolor.Color
  Endif
  
  Settings_Core_Innova.Save
  
End

Public Sub Show_Mouse_Move_Panel()
  
  Try sResult = Settings_Core_Innova["Panel/Taskbar_MouseMove"]
  If sResult = 1 Then
    f_settings.swbPanelMouseMove.Value = True 
  Else
    f_settings.swbPanelMouseMove.Value = False
  Endif
  
End

Public Sub Update_Mouse_Move_Panel()
  
  Settings_Core_Innova.Write(f_settings)
  If f_settings.swbPanelMouseMove.Value = True Then
    Settings_Core_Innova["Panel/Taskbar_MouseMove"] = 1
  Else
    Settings_Core_Innova["Panel/Taskbar_MouseMove"] = 0
  Endif 
  Settings_Core_Innova.Save
  
End

Public Sub Show_Default_Panel()
  
  If f_settings.chkImgPanel.Value = True Or f_settings.chkFontColor.Value = True Or f_settings.chkBackground.Value = True Then
    f_settings.chkBoxDef.Value = False 
  Else
    f_settings.chkBoxDef.Value = True
  Endif
  
End

Public Sub List_Theme_Innova()
  
  Dim cThemes As New Collection
  Dim sTheme As String
  Dim sDir As String
  Dim aThemes As New String[]
  Dim pIcon As Picture
  Dim sPath As String
  
  For Each sDir In Dir("/usr/share/Innova/Theme", Null, gb.Directory)
    cThemes[sDir] = True
  Next
  
  For Each sDir In Dir(Desktop.ConfigDir &/ "Innova/Theme/", Null, gb.Directory)
    cThemes[sDir] = True
  Next
  
  For Each cThemes
    aThemes.Add(cThemes.Key)
  Next
  
  aThemes.Sort(gb.Ascent)
  
  sPath = "/usr/share/Innova/Theme/"
  For Each sTheme In aThemes
    
    ImgButtonStyle = New PushButton(f_settings.sclStyle) As "CButtonStyle"
    ImgButtonStyle.w = 225
    ImgButtonStyle.h = 128
    ImgButtonStyle.Mouse = 13
    ImgButtonStyle.Text = sTheme
    
    If IsNull(pIcon) Then
      sPath = Desktop.ConfigDir &/ "Innova/Theme/"
      
    Endif
    
    pIcon = Picture[sPath & sTheme &/ "Inn_preview.png"]
    Try ImgButtonStyle.Picture = pIcon.Image.Picture
    
  Next
  
End

Public Sub CButtonStyle_Click()
  
  M_Core.Update_Theme_Innova
  M_Theme.Show_Theme
  
End

Public Sub Update_Theme_Innova()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Style_Desktop/Theme_Name_Innova"] = Last.text
  Settings_Core_Innova.Save
  Show_Title_Theme_Innova
  
End

Public Sub Show_Title_Theme_Innova()
  
  Try sResult = Settings_Core_Innova["Style_Desktop/Theme_Name_Innova"]
  f_settings.lbltitletheme.Text = ("Theme Active: ") & sResult
  
End

Public Sub List_Theme_GTK()
  
  Dim cThemes As New Collection
  Dim sTheme As String
  Dim sDir As String
  Dim aThemes As New String[]
  Dim pIcon As Picture
  Dim sPath As String
  
  f_settings.ListViewTheme.Clear
  For Each sDir In Dir("/usr/share/themes/", Null, gb.Directory)
    cThemes[sDir] = True
  Next
  
  For Each sDir In Dir(Desktop.DataDir &/ "themes/", Null, gb.Directory)
    cThemes[sDir] = True
  Next
  
  For Each cThemes
    aThemes.Add(cThemes.Key)
  Next
  
  aThemes.Sort(gb.Ascent)
  
  For Each sTheme In aThemes
    
    f_settings.ListViewTheme.Add(sTheme, sTheme)
  Next
Catch
  Mkdir (Desktop.DataDir &/ "themes/")
  List_Theme_GTK
  
End

Public Sub Show_Title_Theme_GTK()
  
  Try sResult = Settings_Core_Innova["Style_Desktop/Theme_Name_Gtk"]
  f_settings.lbltitlethemeapp.Text = ("Theme Active: ") & sResult
  
End

Public Sub Update_Theme_GTK()
  
  Dim hFile As File
  Dim sFile_GTK2 As String
  Dim sFile_GTK3 As String
  Dim sDat As String
  Dim sTheme_sCursor As String
  Dim sTheme_Gtk As String
  Dim sTheme_Icons As String
  Dim sFont As String
  Dim iFont_Size As Integer
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Style_Desktop/Theme_Name_Gtk"] = f_settings.ListViewTheme.Item.Text
  Settings_Core_Innova.Save
  
  Show_Title_Theme_GTK
  
  Settings_Core_Innova.Reload
  sTheme_Gtk = Settings_Core_Innova["Style_Desktop/Theme_Name_Gtk"]
  sTheme_Icons = Settings_Core_Innova["Style_Desktop/Theme_Name_Icons"]
  sTheme_sCursor = Settings_Core_Innova["Style_Desktop/Theme_Name_Cursor"]
  sFont = Settings_Core_Innova["Style_Desktop/Font_Name"]
  iFont_Size = Settings_Core_Innova["Style_Desktop/Font_Size"]
  
  sFile_GTK2 = (User.Home &/ ".gtkrc-2.0")
  sFile_GTK3 = (Desktop.ConfigDir &/ "gtk-3.0/settings.ini")
  ''GTK2
  If Not Exist(sFile_GTK2) Then
    sDat = "gtk-icon-theme-name = " "'" & sTheme_Icons & "'\n"
      "gtk-theme-name = " "'" & sTheme_Gtk & "'\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"
      "gtk-font-name = " "'" & sFont & " " & iFont_Size & "'\n"
    hFile.Save(sFile_GTK2, sDat)  
  Else
    hFile = Open sFile_GTK2 For Input
    sDat = "gtk-icon-theme-name = " "'" & sTheme_Icons & "'\n"
      "gtk-theme-name = " "'" & sTheme_Gtk & "'\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"
      "gtk-font-name = " "'" & sFont & " " & iFont_Size & "'\n"
    hFile.Save(sFile_GTK2, sDat)  
  Endif
  ''GTK3
  If Not Exist(sFile_GTK3) Then
    sDat = "[Settings]" & "\n"
      "gtk-theme-name = " & sTheme_Gtk & "\n"
      "gtk-icon-theme-name = " & sTheme_Icons & "\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"
      "gtk-font-name = " & sFont & " " & iFont_Size & "\n"
    File.Save(sFile_GTK3, sDat)
  Else
    hFile = Open sFile_GTK3 For Input
    sDat = "[Settings]" & "\n"
      "gtk-theme-name = " & sTheme_Gtk & "\n"
      "gtk-icon-theme-name = " & sTheme_Icons & "\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"      
      "gtk-font-name = " & sFont & " " & iFont_Size & "\n"
    hFile.Save(sFile_GTK3, sDat)  
  Endif
Catch
  
End

Public Sub List_Theme_Icons()
  
  Dim cThemes As New Collection
  Dim sTheme As String
  Dim sDir As String
  Dim aThemes As New String[]
  Dim pIcon As Picture
  Dim sPath As String
  
  f_settings.ListViewIcons.Clear
  For Each sDir In Dir("/usr/share/icons/", Null, gb.Directory)
    cThemes[sDir] = True
  Next
  
  For Each sDir In Dir(Desktop.DataDir &/ "icons/", Null, gb.Directory)
    cThemes[sDir] = True
  Next
  
  For Each cThemes
    aThemes.Add(cThemes.Key)
  Next
  
  aThemes.Sort(gb.Ascent)
  
  For Each sTheme In aThemes 
    f_settings.ListViewIcons.Add(sTheme, sTheme)
  Next
Catch
  Mkdir (Desktop.DataDir &/ "icons/")
  List_Theme_Icons
  
End

Public Sub Show_Title_Theme_Icons()
  
  Try sResult = Settings_Core_Innova["Style_Desktop/Theme_Name_Icons"]
  f_settings.lbltitlethemeicon.Text = ("Theme Active: ") & sResult
  
End

Public Sub Update_Theme_Icons()
  
  Dim hFile As File
  Dim sFile_GTK2 As String
  Dim sFile_GTK3 As String
  Dim sDat As String
  Dim sTheme_sCursor As String
  Dim sTheme_Gtk As String
  Dim sTheme_Icons As String
  Dim sFont As String
  
  Dim iFont_Size As Integer
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Style_Desktop/Theme_Name_Icons"] = f_settings.ListViewIcons.Item.Text
  Settings_Core_Innova.Save
  
  Show_Title_Theme_Icons
  
  Settings_Core_Innova.Reload
  sTheme_Gtk = Settings_Core_Innova["Style_Desktop/Theme_Name_Gtk"]
  sTheme_Icons = Settings_Core_Innova["Style_Desktop/Theme_Name_Icons"]
  sTheme_sCursor = Settings_Core_Innova["Style_Desktop/Theme_Name_Cursor"]
  sFont = Settings_Core_Innova["Style_Desktop/Font_Name"]
  iFont_Size = Settings_Core_Innova["Style_Desktop/Font_Size"]
  
  sFile_GTK2 = (User.Home &/ ".gtkrc-2.0")
  sFile_GTK3 = (Desktop.ConfigDir &/ "gtk-3.0/settings.ini")
  ''GTK2
  If Not Exist(sFile_GTK2) Then
    sDat = "gtk-icon-theme-name = " "'" & sTheme_Icons & "'\n"
      "gtk-theme-name = " "'" & sTheme_Gtk & "'\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"
      "gtk-font-name = " "'" & sFont & " " & iFont_Size & "'\n"
    hFile.Save(sFile_GTK2, sDat)  
  Else
    hFile = Open sFile_GTK2 For Input
    sDat = "gtk-icon-theme-name = " "'" & sTheme_Icons & "'\n"
      "gtk-theme-name = " "'" & sTheme_Gtk & "'\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"
      "gtk-font-name = " "'" & sFont & " " & iFont_Size & "'\n"
    hFile.Save(sFile_GTK2, sDat)  
  Endif
  ''GTK3
  If Not Exist(sFile_GTK3) Then
    sDat = "[Settings]" & "\n"
      "gtk-theme-name = " & sTheme_Gtk & "\n"
      "gtk-icon-theme-name = " & sTheme_Icons & "\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"
      "gtk-font-name = " & sFont & " " & iFont_Size & "\n"
    File.Save(sFile_GTK3, sDat)
  Else
    hFile = Open sFile_GTK3 For Input
    sDat = "[Settings]" & "\n"
      "gtk-theme-name = " & sTheme_Gtk & "\n"
      "gtk-icon-theme-name = " & sTheme_Icons & "\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"
      "gtk-font-name = " & sFont & " " & iFont_Size & "\n"
    hFile.Save(sFile_GTK3, sDat)  
  Endif
  
End

Public Sub Show_Title_Theme_Cursor()
  
  Try sResult = Settings_Core_Innova["Style_Desktop/Theme_Name_Cursor"]
  f_settings.lbltitlecursor2.Text = ("Theme Active: ") & sResult
  
End

Public Sub Update_Theme_Cursor()
  
  Dim hFile As File
  Dim sFile_GTK2 As String
  Dim sFile_GTK3 As String
  Dim sDat As String
  
  Dim sTheme_Gtk As String
  Dim sTheme_Icons As String
  Dim sFont As String
  Dim sTheme_sCursor As String
  Dim iFont_Size As Integer
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Style_Desktop/Theme_Name_Cursor"] = f_settings.lbltitlecursor2.Text
  Settings_Core_Innova.Save
  
  Show_Title_Theme_Cursor
  
  Settings_Core_Innova.Reload
  sTheme_Gtk = Settings_Core_Innova["Style_Desktop/Theme_Name_Gtk"]
  sTheme_Icons = Settings_Core_Innova["Style_Desktop/Theme_Name_Icons"]
  sTheme_sCursor = Settings_Core_Innova["Style_Desktop/Theme_Name_Cursor"]
  sFont = Settings_Core_Innova["Style_Desktop/Font_Name"]
  iFont_Size = Settings_Core_Innova["Style_Desktop/Font_Size"]
  
  sFile_GTK2 = (User.Home &/ ".gtkrc-2.0")
  sFile_GTK3 = (Desktop.ConfigDir &/ "gtk-3.0/settings.ini")
  ''GTK2
  If Not Exist(sFile_GTK2) Then
    sDat = "gtk-icon-theme-name = " "'" & sTheme_Icons & "'\n"
      "gtk-theme-name = " "'" & sTheme_Gtk & "'\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"
      "gtk-font-name = " "'" & sFont & " " & iFont_Size & "'\n"
    hFile.Save(sFile_GTK2, sDat)  
  Else
    hFile = Open sFile_GTK2 For Input
    sDat = "gtk-icon-theme-name = " "'" & sTheme_Icons & "'\n"
      "gtk-theme-name = " "'" & sTheme_Gtk & "'\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"
      "gtk-font-name = " "'" & sFont & " " & iFont_Size & "'\n"
    hFile.Save(sFile_GTK2, sDat)  
  Endif
  ''GTK3
  If Not Exist(sFile_GTK3) Then
    sDat = "[Settings]" & "\n"
      "gtk-theme-name = " & sTheme_Gtk & "\n"
      "gtk-icon-theme-name = " & sTheme_Icons & "\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"
      "gtk-font-name = " & sFont & " " & iFont_Size & "\n"
    File.Save(sFile_GTK3, sDat)
  Else
    hFile = Open sFile_GTK3 For Input
    sDat = "[Settings]" & "\n"
      "gtk-theme-name = " & sTheme_Gtk & "\n"
      "gtk-icon-theme-name = " & sTheme_Icons & "\n"
      "gtk-cursor-theme-name = " "'" & sTheme_sCursor & "'\n"
      "gtk-font-name = " & sFont & " " & iFont_Size & "\n"
    hFile.Save(sFile_GTK3, sDat)  
  Endif
  
End

Public Function Show_Apps()
  
  Dim sResult_File_Manager As String 
  Dim sResult_Browser As String 
  Dim sResult_Terminal As String 
  Dim sResult_VP As String 
  Dim sResult_Edit As String 
  Dim sResult_Windows_Manager As String 
  
  sResult_File_Manager = Settings_Core_Innova["Panel_Command/File_Manager", f_settings]
  Try sResult_Browser = Settings_Core_Innova["Panel_Command/Browser", f_settings]
  Try sResult_Terminal = Settings_Core_Innova["Panel_Command/Terminal", f_settings]
  Try sResult_VP = Settings_Core_Innova["Panel_Command/Video_Player", f_settings]
  Try sResult_Edit = Settings_Core_Innova["Panel_Command/Text_Edit", f_settings]
  sResult_Windows_Manager = Settings_Core_Innova["Session_Windows_Manager/Windows_Manager", f_settings]
  
  f_settings.txtgestor.Text = (sResult_File_Manager)
  f_settings.txtterminal.Text = (sResult_Terminal)
  f_settings.txtweb.Text = (sResult_Browser)
  f_settings.txtvideoplayer.Text = (sResult_VP)
  f_settings.txttextedit.Text = (sResult_Edit)
  f_settings.txtwindows.Text = (sResult_Windows_Manager)
  
  Settings_Core_Innova.Write(f_settings)
  If sResult_Windows_Manager = "kwin" Or sResult_Windows_Manager = "mutter" Then
    Settings_Core_Innova["Innova/Transparent"] = "1"
    
  Endif 
  Settings_Core_Innova.Save
  
  'Catch
  '  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Apps()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Panel_Command/File_Manager"] = f_settings.txtgestor.Text
  Settings_Core_Innova["Panel_Command/Browser"] = f_settings.txtweb.Text
  Settings_Core_Innova["Panel_Command/Terminal"] = f_settings.txtterminal.Text
  Settings_Core_Innova["Panel_Command/Video_Player"] = f_settings.txtvideoplayer.Text
  Settings_Core_Innova["Panel_Command/Text_Edit"] = f_settings.txttextedit.Text
  Settings_Core_Innova["Session_Windows_Manager/Windows_Manager"] = f_settings.txtwindows.Text
  Settings_Core_Innova.Save
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Splash_Dir()
  
  Dim path_origen As String = Desktop.ConfigDir &/ "Innova/Splash"
  Dim i As Integer
  Dim Ficheros As String[], Fichero As String
  
  f_settings.ListBoxSplash.Clear
  
  Ficheros = RDir(path_origen, "*.png", gb.file)
  
  For Each Fichero In Ficheros
    Inc i
    
    f_settings.ListBoxSplash.add(i, Left$(Fichero, -4), Picture[path_origen &/ Fichero].Image.Stretch(96, 64).Picture)
    f_settings.ListBoxSplash.Sorted = True
  Next
Catch
  Message.Info(LC_MESSAGES.MSG_INF_SPLASH_EXIST)
  
End

Public Sub Show_Splash_Full()
  
  Dim iResult As Integer 
  
  Try iResult = Settings_Core_Innova["Innova/Splash_Full"]
  If iResult = 1 Then
    f_settings.btnFS.Value = True 
  Else
    f_settings.btnFS.Value = False
  Endif
  
End

Public Sub Update_Splash_Full()
  
  Dim sResult_FS As String 
  
  Settings_Core_Innova.Write(f_settings)
  
  If f_settings.btnFS.Value = True Then
    Settings_Core_Innova["Innova/Splash_Full"] = "1"
  Else
    Settings_Core_Innova["Innova/Splash_Full"] = ""
  Endif
  
  Settings_Core_Innova.Save
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Update_Splash_Innova()
  
  Settings_Core_Innova.Write(f_settings)
  Settings_Core_Innova["Innova/Image_Splash"] = f_settings.lbltitlesplash.Text 
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End

Public Sub Show_Splash_Innova()
  
  Dim sResult_sSplash As String 
  
  sResult_sSplash = Settings_Core_Innova["Innova/Image_Splash"]
  f_settings.PicSplashPreview.Picture = Picture[sResult_sSplash]
  f_settings.lbltitlesplash.Text = sResult_sSplash
  
Catch
  Debug "ERROR [ " & DConv(Error.Text) & " ]"
  
End
